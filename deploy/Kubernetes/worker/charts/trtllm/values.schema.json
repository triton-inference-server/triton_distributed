{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "copyright": [
    "SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.",
    "SPDX-License-Identifier: Apache-2.0",
    "Licensed under the Apache License, Version 2.0 (the \"License\");",
    "you may not use this file except in compliance with the License.",
    "You may obtain a copy of the License at",
    "http://www.apache.org/licenses/LICENSE-2.0",
    "Unless required by applicable law or agreed to in writing, software",
    "distributed under the License is distributed on an \"AS IS\" BASIS,",
    "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "See the License for the specific language governing permissions and",
    "limitations under the License."
  ],
  "properties": {
    "image": {
      "description": "Configuration options related to the Triton Distributed Worker container image.",
      "properties": {
        "pullSecrets": {
          "description": "Optional list of pull secrets to be used when downloading the Triton Distributed Worker container image.",
          "oneOf": [
            {
              "items": [
                {
                  "properties": {
                    "name": {
                      "$ref": "#/$defs/kubernetes_label",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "minItems": 0,
              "type": "array"
            },
            { "type": "null" }
          ]
        },
        "name": {
          "description": "Name of the container image containing the version of Triton Distributed Worker container image to be used.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "kubernetes": {
      "description": "Configurations option related to the Kubernetes objects created by the chart.",
      "properties": {
        "checks": {
          "description": "Optional configuration options controlling how the cluster monitors the health of Triton Distributed Worker deployment(s).",
          "properties": {
            "liveness": {
              "description": "Configuration options related to how the cluster determines that a Triton Distributed Worker instance is \"alive\" and responsive.",
              "properties": {
                "enabled": {
                  "description": "When `true`, the cluster will actively determine if the pod is alive; otherwise the cluster will always assume the pod is alive.",
                  "oneOf": [
                    { "type": "boolean" },
                    { "type": "null" }
                  ]
                },
                "failureThreshold": {
                  "description": "Number of failed responses required to determine a pod is not responsive (aka \"alive\").",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                },
                "initialDelaySeconds": {
                  "description": "Minimum wait before the cluster beings to attempt to determine the health of the pod.",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                },
                "periodSeconds": {
                  "description": "Minimum period between attempts to determine the health of the pod.",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                },
                "successThreshold": {
                  "description": "Number of successful responses required to determine that a pod is healthy.",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            },
            "readiness": {
              "description": "Configuration options related to how the cluster determines that a Triton Distributed Worker instance is ready.",
              "properties": {
                "enabled": {
                  "description": "When `true`, the cluster will actively determine if the pod is ready; otherwise the cluster will always assume the pod is ready.",
                  "oneOf": [
                    { "type": "boolean" },
                    { "type": "null" }
                  ]
                },
                "failureThreshold": {
                  "description": "Number of failed responses required to determine a pod is not responsive (aka \"ready\").",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                },
                "initialDelaySeconds": {
                  "description": "Minimum wait before the cluster beings to attempt to determine the readiness of the pod.",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                },
                "periodSeconds": {
                  "description": "Minimum period between attempts to determine the readiness of the pod.",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                },
                "successThreshold": {
                  "description": "Number of successful responses required to determine that a pod is ready.",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            }
          },
          "oneOf": [
            { "type": "object" },
            { "type": "null" }
          ]
        },
        "labels": {
          "description": "Optional set of labels to be applied to created Kubernetes objects. These labels can be used for association with a preexisting service object.",
          "oneOf": [
            {
              "items": {
                "$ref": "#/$defs/kubernetes_label"
              },
              "minItems": 0,
              "type": "array"
            },
            { "type": "null" }
          ]
        },
        "tolerations": {
          "description": "Tolerations applied to every pod deployed as part of this deployment.",
          "oneOf": [
            {
              "items": { "type": "object" },
              "minItems": 0,
              "type": "array"
            },
            { "type": "null" }
          ]
        }
      },
      "oneOf": [
        { "type": "object" },
        { "type": "null" }
      ]
    },
    "modelRepository": {
      "description": "Configuration options related to the model repository used by the Triton Distributed Worker to load model(s).",
      "properties": {
        "modelGeneration": {
          "description": "Configuration options related to the generation of TRTLLM plan and engine files from a source model files.",
          "properties": {
            "enabled": {
              "description": "When `true`, the plan and engine files will be generated when the worker is deployed; otherwise it is assumed the necessary files have been pre-generated and will be provided without the need for the generation steps.",
              "oneOf": [
                { "type": "boolean" },
                { "type": "null" }
              ]
            },
            "hostCache": {
              "description": "Configurations options related to the caching of generated model using host file system.",
              "properties": {
                "enabled": {
                  "description": "When `true`, model generation will be completed as part of an initialization phase, and cached on the host machine to avoid repeating model generation costs when possible. When `false`, each worker pod will perform the model generation steps without caching results.",
                  "oneOf": [
                    { "type": "boolean" },
                    { "type": "null" }
                  ]
                },
                "hostPath": {
                  "description": "Host file system path to the TRTLLM model cache directory.",
                  "oneOf": [
                    { "type": "string" },
                    { "type": "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            },
            "options": {
              "description": "Lists of options to pass to the model generation tool chain.",
              "properties": {
                "convertCheckpoint": {
                  "description": "List of options specifically for the `convert_checkpoint.py` model generation script.",
                  "oneOf": [
                    {
                      "items": { "type": "string" },
                      "minItems": 0,
                      "type": "array"
                    },
                    { "type": "null" }
                  ]
                },
                "trtllmBuild": {
                  "description": "List of options specifically for the `trtllm-build` model generation tool.",
                  "oneOf": [
                    {
                      "items": { "type": "string" },
                      "minItems": 0,
                      "type": "array"
                    },
                    { "type": "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            },
            "path": {
              "description": "Container local file system path to the model generation checkpoint directory.",
              "oneOf": [
                { "type": "string" },
                { "type": "null" }
              ]
            },
            "sizeLimit": {
              "description": "Storage space quota applied to the model cache. Value must be provided in Kubernetes' unit notation.",
              "oneOf": [
                { "$ref": "#/$defs/kubernetes_units" },
                { "type": "null" }
              ]
            }
          },
          "oneOf": [
            { "type": "object" },
            { "type": "null" }
          ]
        },
        "path": {
          "description": "Local file-system path within the container to the model repository.",
          "oneOf": [
            { "type": "string" },
            { "type": "null" }
          ]
        },
        "volumeMounts": {
          "description": "Persistent volumes to be mounted with the container.",
          "oneOf": [
            {
              "items": {
                "properties": {
                  "name": {
                    "description": "Name to associate the volume mount with. Volume mount names must be unique and cannot contain spaces or special characters.",
                    "$ref": "#/$defs/kubernetes_label"
                  },
                  "path": {
                    "description": "Path relative to model repository's root path. When not provided, the volume is mounted to the root of the repository. Overlapping mount paths can cause errors during container deployment.",
                    "oneOf": [
                      { "type": "string" },
                      { "type": "null" }
                    ]
                  },
                  "persistentVolumeClaim": {
                    "description": "Name of the persistent volume claim used to mount a folder containing the model(s) Triton will load.",
                    "$ref": "#/$defs/kubernetes_label"
                  }
                },
                "type": "object",
                "required": [
                  "name",
                  "persistentVolumeClaim"
                ]
              },
              "minItems": 0,
              "type": "array"
            },
            { "type": "null" }
          ]
        }
      },
      "oneOf": [
        { "type": "object" },
        { "type": "null" }
      ]
    },
    "triton": {
      "description": "Configuration options related to the operation of Triton Distributed Worker.",
      "properties": {
        "componentName": {
          "description": "Name of the Triton Distributed Worker in the distributed deployment.",
          "pattern": "^[a-z]([a-z0-9_\\-]{0,29}[a-z0-9])?$",
          "type": "string"
        },
        "distributed": {
          "description": "Configuration options related to organization of Triton Distributed workflows.",
          "properties": {
            "requestPlane": {
              "description": "Configuration options related to connecting the Triton Distributed Worker to its Triton Distributed Request Plane.",
              "properties": {
                "serverKind": {
                  "description": "Kind of server providing Triton Distributed Request Plane functionality. Supported options: 'nats-io'.",
                  "oneOf": [
                    {
                      "pattern": "^nats-io$",
                      "type": "string"
                    },
                    { "type": "null" }
                  ]
                },
                "serviceName": {
                  "description": "Name of the Kubernetes Service handling DNS routing for the Triton Distributed Request Plane instances.",
                  "oneOf": [
                    { "type": "string" },
                    { "type": "null" }
                  ]
                },
                "servicePort": {
                  "description": "Networking port to be used to interact with the Triton Distributed Request Plane.",
                  "oneOf": [
                    { "$ref": "#/$defs/container_port" },
                    { "type": "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            },
            "instance": {
              "description": "Optional configuration options related to the number of Triton Distributed Worker pods are deployed.",
              "properties": {
                "count": {
                  "description": "Number of worker instances (whole model) to be deployed as part of this helm chart.",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                },
                "parallelism": {
                  "description": "Optional configuration options related to how work for a single model is spread across multiple pods. When the product of `pipeline`*`tensor` is greater than 1, multiple pods will be deployed as a single logical worker.",
                  "properties": {
                    "pipeline": {
                      "description": "Pipeline parallelism involves sharding the model (vertically) into chunks, where each chunk comprises a subset of layers that is executed on a separate device.",
                      "oneOf": [
                        {
                          "minimum": 1,
                          "type": "integer"
                        },
                        { "type": "null" }
                      ]
                    },
                    "tensor": {
                      "description": "Tensor parallelism involves sharding (horizontally) individual layers of the model into smaller, independent blocks of computation that can be executed on different devices.",
                      "oneOf": [
                        {
                          "minimum": 1,
                          "type": "integer"
                        },
                        { "type": "null" }
                      ]
                    }
                  },
                  "oneOf": [
                    { "type": "object" },
                    { "type": "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            },
            "logging": {
              "description": "Logging configuration options specific to Triton Distributed Worker.",
              "properties": {
                "useIso8601": {
                  "description": "When `true` Triton Distributed Worker logs are formatted using the ISO8601 standard; otherwise Triton's default format will be used.",
                  "oneOf": [
                    { "type": "boolean" },
                    { "type": "null" }
                  ]
                },
                "verbose": {
                  "description": "When `true` Triton Distributed Worker uses verbose logging; otherwise standard logging is used.",
                  "oneOf": [
                    { "type": "boolean" },
                    { "type": "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            },
            "ports": {
              "description": "Configuration options for the management of the Triton Distributed Worker exposed.",
              "properties": {
                "data": {
                  "description": "Container port exposed to enable Triton Distributed Worker data-plane operations.",
                  "oneOf": [
                    { "$ref": "#/$defs/container_port" },
                    { "type": "null" }
                  ]
                },
                "health": {
                  "description": "Container port exposed to enable Triton Distributed Worker Kubernetes health reporting.",
                  "oneOf": [
                    { "$ref": "#/$defs/container_port" },
                    { "type": "null" }
                  ]
                },
                "metrics": {
                  "description": "Container port exposed to enable Triton Distributed Worker metrics reporting.",
                  "oneOf": [
                    { "$ref": "#/$defs/container_port" },
                    { "type": "null" }
                  ]
                },
                "request": {
                  "description": "Container port exposed to enable Triton Distributed Worker request-plane operations.",
                  "oneOf": [
                    { "$ref": "#/$defs/container_port" },
                    { "type": "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            },
            "resources": {
              "description": "Configuration options related to the resources assigned to Triton Distributed Worker and loaded model(s).",
              "properties": {
                "cpu": {
                  "description": "Number of logical CPU cores required by the Triton Distributed Worker and loaded model(s).",
                  "oneOf": [
                    {
                      "minimum": 1,
                      "type": "integer"
                    },
                    { "type": "null" }
                  ]
                },
                "ephemeral": {
                  "description": "Ephemeral storage (aka local disk usage) allowance. Value must be provided in Kubernetes' unit notation.",
                  "oneOf": [
                    { "$ref": "#/$defs/kubernetes_units" },
                    { "type": "null" }
                  ]
                },
                "gpu": {
                  "description": "Configuration options related GPU resources to be assigned to the Triton Distributed Worker and loaded model(s).",
                  "properties": {
                    "count": {
                      "description": "Number of GPUs required by the Triton Distributed Worker and loaded model(s).",
                      "oneOf": [
                        {
                          "minimum": 1,
                          "type": "integer"
                        },
                        { "type" : "null" }
                      ]
                    },
                    "product": {
                      "description": "List of the GPUs support `.model` and to which Triton Distributed Worker instances can be deployed.",
                      "oneOf": [
                        {
                          "items": {
                            "$ref": "#/$defs/kubernetes_label"
                          },
                          "type": "array"
                        },
                        { "type": "null" }
                      ]
                    }
                  },
                  "oneOf": [
                    { "type": "object" },
                    { "type": "null" }
                  ]
                },
                "memory": {
                  "description": "Amount of CPU visible (aka host) memory available to the Triton Distributed Worker and loaded model(s). Value must be provided in Kubernetes' unit notation.",
                  "oneOf": [
                    { "$ref": "#/$defs/kubernetes_units" },
                    { "type" : "null" }
                  ]
                },
                "sharedMemory": {
                  "description": "Amount of shared CPU visible (aka host) memory available the Triton Distributed Worker and loaded model(s). Value must be provided in Kubernetes' unit notation.",
                  "oneOf": [
                    { "$ref": "#/$defs/kubernetes_units" },
                    { "type" : "null" }
                  ]
                }
              },
              "oneOf": [
                { "type": "object" },
                { "type": "null" }
              ]
            }
          },
          "oneOf": [
            { "type": "object" },
            { "type": "null" }
          ]
        }
      },
      "required": [
        "componentName"
      ],
      "type": "object"
    }
  },
  "required": [
    "image",
    "triton"
  ],
  "type": "object",
  "$defs": {
    "container_port": {
      "maximum": 65535,
      "minimum": 1025,
      "type": "integer"
    },
    "kubernetes_label": {
      "pattern": "^[a-z0-9]([a-z0-9_\\-\\/\\.]{0,61}[a-z0-9])?$",
      "type": "string"
    },
    "kubernetes_units": {
      "pattern": "^\\d+[GKMgkm]i$",
      "type": "string"
    },
    "service_port": {
      "maximum": 32767,
      "minimum": 30000,
      "type": "integer"
    }
  }
}
