# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: NVIDIA Test Lab Validation

on:
  push:
    branches:
    # - main

  pull_request:

jobs:
  # mirror_repo:
  #   name: Mirror Repository to GitLab
  #   environment: GITLAB
  #   runs-on: self-hosted
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #   - name: Sync Mirror Repository
  #     run: ./.github/workflows/mirror_repo.sh ${{ secrets.TOKEN }} ${{ secrets.MIRROR_URL }}

  trigger-ci:
    name: Trigger CI Pipeline
    environment: GITLAB
    # needs: mirror_repo
    runs-on: self-hosted
    steps:
    - name: Detect source code changes
      id: src_changes
      uses: dorny/paths-filter@v3
      with:
        filters: |
          vllm:
            - 'container/Dockerfile.vllm'
            - 'examples/python/llm/**'
            - 'examples/python_rs/llm/**'
            - 'container/deps/requirements.vllm.txt'
            - 'container/deps/vllm/**'
    - name: Get commit message
      id: get_commit_message
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "message=$(git log -1 --pretty=%B ${{ github.event.pull_request.head.sha }})" >> $GITHUB_OUTPUT
        else
          echo "message=$(git log -1 --pretty=%B ${{ github.sha }})" >> $GITHUB_OUTPUT
        fi
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Trigger Pipeline
      run: |
        #!/bin/bash -e
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          REF="${{ github.event.pull_request.head.ref }}"
        else
          REF="${{ github.ref }}"
        fi
        python ./.github/workflows/trigger_ci.py \
          --ref $REF \
          --filters "${{ steps.src_changes.outputs }}" \
          --commit-message "${{ steps.get_commit_message.outputs.message }}"
