# SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: NVIDIA Test Github Validation

on:
  pull_request:
    paths-ignore:
      - 'deploy/Kubernetes/**'
      - '**/*.md'

jobs:
  build-test:
    runs-on: 
      group: Fastchecker
    strategy:
      matrix:
        framework:
          - standard
          - vllm
    name: Build and Test - ${{ matrix.framework }}
    env:
      CONTAINER_ID: test_${{ github.run_id }}_${{ github.run_attempt }}_${{ github.job }}_${{ matrix.framework }}
      IMAGE_TAG: ghcr.io/triton-inference-server/triton_distributed:pr_${{ github.event.pull_request.number}}_${{ matrix.framework }}
      PYTEST_XML_FILE: pytest_test_report.xml
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Decide on cache
        id: which_cache
        env:
          DEFAULT_CACHE_LOCATION: ghcr.io/triton-inference-server/triton_distributed:buildcache_${{ matrix.framework }}
        run: |
          set +e
          docker manifest inspect ${{ env.IMAGE_TAG }}
          if [ $? -eq 0 ]; then
            echo "USING ${{ env.IMAGE_TAG }}"
            echo "cache_from_location=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          else
            echo "USING ${{ env.DEFAULT_CACHE_LOCATION }}"
            echo "cache_from_location=${{ env.DEFAULT_CACHE_LOCATION }}" >> $GITHUB_OUTPUT
          fi
          echo "cache_to_location=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
      - name: Build and cache image
        if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
        env:
          CACHE_FROM: "type=registry,ref=${{ steps.which_cache.outputs.cache_from_location }}"
          CACHE_TO: "type=registry,ref=${{ steps.which_cache.outputs.cache_to_location }},image-manifest=true,mode=max"
        run: |
          ./container/build.sh --tag ${{ env.IMAGE_TAG }} --framework ${{ matrix.framework }} --cache-from "${{ env.CACHE_FROM }}" --cache-to "${{ env.CACHE_TO }}"
      - name: Build image (fork)
        if: ${{ github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name }}
        run: |
          ./container/build.sh --tag ${{ env.IMAGE_TAG }} --framework ${{ matrix.framework }}"
      - name: Run pytest
        env:
          PYTEST_MARKS: "pre_merge or mypy"
        run: |
          docker run -w /workspace --name ${{ env.CONTAINER_ID }} ${{ env.IMAGE_TAG }} pytest --basetemp=/tmp --junitxml=${{ env.PYTEST_XML_FILE }} -m "${{ env.PYTEST_MARKS }}"
      - name: Copy test report from test Container
        if: always()
        run: |
          docker cp ${{ env.CONTAINER_ID }}:/workspace/${{ env.PYTEST_XML_FILE }} .
      - name: Archive test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.framework }}-python-test-results
          if-no-files-found: error
          path: |
            ${{ env.PYTEST_XML_FILE }}

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: Event File
          path: ${{ github.event_path }}
